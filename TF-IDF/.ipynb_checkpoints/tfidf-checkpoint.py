{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([1., 0., 0., 0., 0., 0.]), array([0.33333333, 0.42922736, 0.56438239, 0.        , 0.        ,\n",
      "       0.        ]), array([0.2       , 0.25753641, 0.33862944, 0.47725887, 0.47725887,\n",
      "       0.        ]), array([0.33333333, 0.42922736, 0.        , 0.        , 0.        ,\n",
      "       0.79543145])]\n",
      "{'_id': 6, '雨': 0, '今日': 1, '降る': 2, '暑い': 3, '日': 4, '日曜': 5}\n"
     ]
    }
   ],
   "source": [
    "# TF-IDFでテキストをベクトル化するモジュール\n",
    "import MeCab\n",
    "import pickle\n",
    "import numpy as np\n",
    "\n",
    "# MeCabの初期化 ---- (*1)\n",
    "tagger = MeCab.Tagger(\n",
    "    \"-d /var/lib/mecab/dic/mecab-ipadic-neologd\")\n",
    "# グローバル変数 --- (*2)\n",
    "word_dic = {'_id': 0} # 単語辞書\n",
    "dt_dic = {} # 文書全体での単語の出現回数\n",
    "files = [] # 全文書をIDで保存\n",
    "\n",
    "def tokenize(text):\n",
    "    '''MeCabで形態素解析を行う''' # --- (*3)\n",
    "    result = []\n",
    "    word_s = tagger.parse(text)\n",
    "    for n in word_s.split(\"\\n\"):\n",
    "        if n == 'EOS' or n == '': continue\n",
    "        p = n.split(\"\\t\")[1].split(\",\")\n",
    "        h, h2, org = (p[0], p[1], p[6])\n",
    "        if not (h in ['名詞', '動詞', '形容詞']): continue\n",
    "        if h == '名詞' and h2 == '数': continue\n",
    "        result.append(org)\n",
    "    return result\n",
    "\n",
    "def words_to_ids(words, auto_add = True):\n",
    "    '''単語一覧をIDの一覧に変換する''' # --- (*4)\n",
    "    result = []\n",
    "    for w in words:\n",
    "        if w in word_dic:\n",
    "            result.append(word_dic[w])\n",
    "            continue\n",
    "        elif auto_add:\n",
    "            id = word_dic[w] = word_dic['_id']\n",
    "            word_dic['_id'] += 1\n",
    "            result.append(id)\n",
    "    return result\n",
    "\n",
    "def add_text(text):\n",
    "    '''テキストをIDリストに変換して追加''' # --- (*5)\n",
    "    ids = words_to_ids(tokenize(text))\n",
    "    files.append(ids)\n",
    "\n",
    "def add_file(path):\n",
    "    '''テキストファイルを学習用に追加する''' # --- (*6)\n",
    "    with open(path, \"r\", encoding=\"utf-8\") as f:\n",
    "        s = f.read()\n",
    "        add_text(s)\n",
    "\n",
    "def calc_files():\n",
    "    '''追加したファイルを計算''' # --- (*7)\n",
    "    global dt_dic\n",
    "    result = []\n",
    "    doc_count = len(files)\n",
    "    dt_dic = {}\n",
    "    # 単語の出現頻度を数える --- (*8)\n",
    "    for words in files:\n",
    "        used_word = {}\n",
    "        data = np.zeros(word_dic['_id'])\n",
    "        for id in words:\n",
    "            data[id] += 1\n",
    "            used_word[id] = 1\n",
    "        # 単語tが使われていればdt_dicを加算 --- (*9)\n",
    "        for id in used_word:\n",
    "            if not(id in dt_dic): dt_dic[id] = 0\n",
    "            dt_dic[id] += 1\n",
    "        # 出現回数を割合に直す --- (*10)\n",
    "        data = data / len(words) \n",
    "        result.append(data)\n",
    "    # TF-IDFを計算 --- (*11)\n",
    "    for i, doc in enumerate(result):\n",
    "        for id, v in enumerate(doc):\n",
    "            idf = np.log(doc_count / dt_dic[id]) + 1\n",
    "            doc[id] = min([doc[id] * idf, 1.0])\n",
    "        result[i] = doc\n",
    "    return result\n",
    "\n",
    "def save_dic(fname):\n",
    "    '''辞書をファイルへ保存する''' # --- (*12)\n",
    "    pickle.dump(\n",
    "        [word_dic, dt_dic, files],\n",
    "        open(fname, \"wb\"))\n",
    "\n",
    "def load_dic(fname):\n",
    "    '''辞書をファイルから読み込む''' # --- (*13)\n",
    "    global word_dic, dt_dic, files\n",
    "    n = pickle.load(open(fname, 'rb'))\n",
    "    word_dic, dt_dic, files = n\n",
    "\n",
    "def calc_text(text):\n",
    "    ''' 辞書を更新せずにベクトル変換する ''' # --- (*14)\n",
    "    data = np.zeros(word_dic['_id'])\n",
    "    words = words_to_ids(tokenize(text), False)\n",
    "    for w in words:\n",
    "        data[w] += 1\n",
    "    data = data / len(words)\n",
    "    for id, v in enumerate(data):\n",
    "        idf = np.log(len(files) / dt_dic[id]) + 1\n",
    "        data[id] = min([data[id] * idf, 1.0])\n",
    "    return data\n",
    "\n",
    "# モジュールのテスト --- (*15)\n",
    "if __name__ == '__main__':\n",
    "    add_text('雨')\n",
    "    add_text('今日は、雨が降った。')\n",
    "    add_text('今日は暑い日だったけど雨が降った。')\n",
    "    add_text('今日も雨だ。でも日曜だ。')\n",
    "    print(calc_files())\n",
    "    print(word_dic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
